// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RandBox.Server.Data;

#nullable disable

namespace RandBox.Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "645bb191-486c-4a9e-8f38-2a48b60b8df6",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "71741074-bd54-43f9-b837-c0c34c71905e",
                            Name = "Staff-Guest",
                            NormalizedName = "STAFF-GUEST"
                        },
                        new
                        {
                            Id = "910da4f5-6826-419b-b66a-eb995b68bd15",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RandBox.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UnitNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RandBox.Shared.Domain.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("BadgeColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            BadgeColour = "#78A54E",
                            DateTimeCreated = new DateTime(2024, 1, 8, 2, 19, 2, 767, DateTimeKind.Local).AddTicks(9830),
                            Description = "Experience local snacks and treats, all while helping to support local family owned businesses!",
                            Name = "Snacks"
                        },
                        new
                        {
                            CategoryID = 2,
                            BadgeColour = "#D48250",
                            DateTimeCreated = new DateTime(2024, 1, 8, 2, 19, 2, 767, DateTimeKind.Local).AddTicks(9832),
                            Description = "Dress up as people from all over the globe! From Kimonos to Hanboks, get a fresh look every month!",
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryID = 3,
                            BadgeColour = "#D45A50",
                            DateTimeCreated = new DateTime(2024, 1, 8, 2, 19, 2, 767, DateTimeKind.Local).AddTicks(9833),
                            Description = "Unleash your artistic creativity with arts and crafts from all over the world!",
                            Name = "Arts and Crafts"
                        });
                });

            modelBuilder.Entity("RandBox.Shared.Domain.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryID"));

                    b.Property<string>("BadgeColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            CountryID = 1,
                            BadgeColour = "#78A54E",
                            DateTimeCreated = new DateTime(2024, 1, 8, 2, 19, 2, 768, DateTimeKind.Local).AddTicks(763),
                            Description = "Bring the well-known festivities and nightlife of Germany to your own home!",
                            Name = "Germany"
                        },
                        new
                        {
                            CountryID = 2,
                            BadgeColour = "#D45A50",
                            DateTimeCreated = new DateTime(2024, 1, 8, 2, 19, 2, 768, DateTimeKind.Local).AddTicks(765),
                            Description = "The land of the rising sun, experience the iconic cultures and long-standing traditions of Japan! ",
                            Name = "Japan"
                        },
                        new
                        {
                            CountryID = 3,
                            BadgeColour = "#D48250",
                            DateTimeCreated = new DateTime(2024, 1, 8, 2, 19, 2, 768, DateTimeKind.Local).AddTicks(766),
                            Description = "With many diverse ethnic groups, experience the traditional tastes and cultures of the worlds largest island country.",
                            Name = "Indonesia"
                        });
                });

            modelBuilder.Entity("RandBox.Shared.Domain.Customer", b =>
                {
                    b.Property<int>("CustID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustID");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            CustID = 1,
                            Address = "Lane Road 2",
                            DateOfBirth = new DateTime(2005, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTimeCreated = new DateTime(2024, 1, 8, 2, 19, 2, 767, DateTimeKind.Local).AddTicks(9563),
                            Email = "cout.sngtech@gmail.com",
                            FirstName = "Titus",
                            LastName = "Lim",
                            PasswordHash = "",
                            PostalCode = "342352",
                            UnitNo = "04-06"
                        },
                        new
                        {
                            CustID = 2,
                            Address = "Hoppa Avenue 8",
                            DateOfBirth = new DateTime(2005, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTimeCreated = new DateTime(2024, 1, 8, 2, 19, 2, 767, DateTimeKind.Local).AddTicks(9579),
                            Email = "patrick_wu@gmail.com",
                            FirstName = "Patrick",
                            LastName = "Wu",
                            PasswordHash = "",
                            PostalCode = "442532",
                            UnitNo = "23-45"
                        });
                });

            modelBuilder.Entity("RandBox.Shared.Domain.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeCheckout")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DeliveryStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            CustomerID = 1,
                            DateTimeCheckout = new DateTime(2024, 1, 8, 2, 19, 2, 768, DateTimeKind.Local).AddTicks(322),
                            DeliveryStatus = true,
                            StaffID = 1
                        },
                        new
                        {
                            OrderID = 2,
                            CustomerID = 2,
                            DateTimeCheckout = new DateTime(2024, 1, 8, 2, 19, 2, 768, DateTimeKind.Local).AddTicks(324),
                            DeliveryStatus = false,
                            StaffID = 2
                        });
                });

            modelBuilder.Entity("RandBox.Shared.Domain.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemID"));

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("Qty")
                        .HasColumnType("int");

                    b.HasKey("OrderItemID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItem");

                    b.HasData(
                        new
                        {
                            OrderItemID = 1,
                            OrderID = 1,
                            ProductID = 1,
                            Qty = 2
                        },
                        new
                        {
                            OrderItemID = 2,
                            OrderID = 2,
                            ProductID = 2,
                            Qty = 4
                        });
                });

            modelBuilder.Entity("RandBox.Shared.Domain.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ManufacturedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("StockNo")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("CountryID");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            CategoryID = 1,
                            CountryID = 3,
                            Description = "Traditional Steamed Cupcake",
                            DiscountedPrice = 12.29m,
                            ExpiryDate = new DateTime(2024, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturedDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kue Mangkok",
                            OriginalPrice = 17.89m,
                            StockNo = 501,
                            ThumbnailURL = "images/products/kue_mangkok.png"
                        },
                        new
                        {
                            ProductID = 2,
                            CategoryID = 1,
                            CountryID = 1,
                            Description = "Traditional Onion Cake",
                            DiscountedPrice = 7.79m,
                            ExpiryDate = new DateTime(2024, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturedDate = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zwiebelkuchen",
                            OriginalPrice = 10.21m,
                            StockNo = 278,
                            ThumbnailURL = "images/products/zwiebelkuchen.png"
                        },
                        new
                        {
                            ProductID = 3,
                            CategoryID = 1,
                            CountryID = 2,
                            Description = "Special Chocolate Bar",
                            DiscountedPrice = 5.89m,
                            ExpiryDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturedDate = new DateTime(2023, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ruby-cocoa KitKat",
                            OriginalPrice = 5.89m,
                            StockNo = 1001,
                            ThumbnailURL = "images/products/ruby_cocoa_kitkat.png"
                        },
                        new
                        {
                            ProductID = 4,
                            CategoryID = 1,
                            CountryID = 2,
                            Description = "Local favourite chips by Lorenz",
                            DiscountedPrice = 6.80m,
                            ExpiryDate = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturedDate = new DateTime(2022, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ramune Soda Candy",
                            OriginalPrice = 7.21m,
                            StockNo = 456,
                            ThumbnailURL = "images/products/ramune_soda_candy.png"
                        },
                        new
                        {
                            ProductID = 5,
                            CategoryID = 1,
                            CountryID = 2,
                            Description = "Unique Red Bean Pancake",
                            DiscountedPrice = 11.79m,
                            ExpiryDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturedDate = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dorayaki",
                            OriginalPrice = 12.21m,
                            StockNo = 123,
                            ThumbnailURL = "images/products/dorayaki.png"
                        },
                        new
                        {
                            ProductID = 6,
                            CategoryID = 1,
                            CountryID = 1,
                            Description = "Local favourite chips by Lorenz",
                            DiscountedPrice = 7.79m,
                            ExpiryDate = new DateTime(2024, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturedDate = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Crunchips Paprika",
                            OriginalPrice = 10.21m,
                            StockNo = 278,
                            ThumbnailURL = "https://m.media-amazon.com/images/I/71Lnoe-JAkL.__AC_SX300_SY300_QL70_ML2_.jpg"
                        });
                });

            modelBuilder.Entity("RandBox.Shared.Domain.Staff", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffID"));

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffID");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            StaffID = 1,
                            ContactNumber = "81004821",
                            DateOfBirth = new DateTime(2005, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Shan2209@gmail.com",
                            FirstName = "Shan",
                            LastName = "Lim",
                            PasswordHash = ""
                        },
                        new
                        {
                            StaffID = 2,
                            ContactNumber = "91028765",
                            DateOfBirth = new DateTime(2005, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AtuTriyoso@gmail.com",
                            FirstName = "Atu",
                            LastName = "Triyoso",
                            PasswordHash = ""
                        });
                });

            modelBuilder.Entity("RandBox.Shared.Domain.SubscriptionCategory", b =>
                {
                    b.Property<int>("SubscriptionCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionCategoryID"));

                    b.Property<decimal>("BaseMonthlyPrice")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<decimal>("NewMonthlyPrice")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("SubscriptionCategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("SubscriptionCategory");

                    b.HasData(
                        new
                        {
                            SubscriptionCategoryID = 1,
                            BaseMonthlyPrice = 45.50m,
                            CategoryID = 1,
                            Description = "randBox's starter plan. This is the perfect plan for those who want to test our ingenious Mysery Boxes. Go on, we won't judge.",
                            Duration = 1,
                            NewMonthlyPrice = 45.50m
                        },
                        new
                        {
                            SubscriptionCategoryID = 2,
                            BaseMonthlyPrice = 45.50m,
                            CategoryID = 2,
                            Description = "randBox's starter plan. This is the perfect plan for those who want to test our ingenious Mysery Boxes. Go on, we won't judge.",
                            Duration = 1,
                            NewMonthlyPrice = 46.50m
                        },
                        new
                        {
                            SubscriptionCategoryID = 3,
                            BaseMonthlyPrice = 45.50m,
                            CategoryID = 3,
                            Description = "randBox's starter plan. This is the perfect plan for those who want to test our ingenious Mysery Boxes. Go on, we won't judge.",
                            Duration = 1,
                            NewMonthlyPrice = 46.90m
                        },
                        new
                        {
                            SubscriptionCategoryID = 4,
                            BaseMonthlyPrice = 44.00m,
                            CategoryID = 1,
                            Description = "randBox's intermediate plan. This is the perfect plan for those who want more of our ingenious Mysery Boxes. Go on, we won't judge.",
                            Duration = 3,
                            NewMonthlyPrice = 44.00m
                        },
                        new
                        {
                            SubscriptionCategoryID = 5,
                            BaseMonthlyPrice = 45.00m,
                            CategoryID = 2,
                            Description = "randBox's intermediate plan. This is the perfect plan for those who want more of our ingenious Mysery Boxes. Go on, we won't judge.",
                            Duration = 3,
                            NewMonthlyPrice = 45.00m
                        },
                        new
                        {
                            SubscriptionCategoryID = 6,
                            BaseMonthlyPrice = 46.40m,
                            CategoryID = 3,
                            Description = "randBox's intermediate plan. This is the perfect plan for those who want more of our ingenious Mysery Boxes. Go on, we won't judge.",
                            Duration = 3,
                            NewMonthlyPrice = 46.40m
                        },
                        new
                        {
                            SubscriptionCategoryID = 7,
                            BaseMonthlyPrice = 43.50m,
                            CategoryID = 1,
                            Description = "randBox's half-year plan. This is the perfect plan for those who live on our Mystery Boxes. Go on, we won't judge.",
                            Duration = 6,
                            NewMonthlyPrice = 43.50m
                        },
                        new
                        {
                            SubscriptionCategoryID = 8,
                            BaseMonthlyPrice = 44.50m,
                            CategoryID = 2,
                            Description = "randBox's half-year plan. This is the perfect plan for those who live on our Mystery Boxes. Go on, we won't judge.",
                            Duration = 6,
                            NewMonthlyPrice = 44.50m
                        },
                        new
                        {
                            SubscriptionCategoryID = 9,
                            BaseMonthlyPrice = 44.90m,
                            CategoryID = 3,
                            Description = "randBox's half-year plan. This is the perfect plan for those who live on our Mystery Boxes. Go on, we won't judge.",
                            Duration = 6,
                            NewMonthlyPrice = 44.90m
                        },
                        new
                        {
                            SubscriptionCategoryID = 10,
                            BaseMonthlyPrice = 41.35m,
                            CategoryID = 1,
                            Description = "randBox's most popular plan. This is the perfect plan for those who just can't get enough of our unique Mystery Boxes. Go on, we won't judge.",
                            Duration = 12,
                            NewMonthlyPrice = 41.35m
                        },
                        new
                        {
                            SubscriptionCategoryID = 11,
                            BaseMonthlyPrice = 42.35m,
                            CategoryID = 2,
                            Description = "randBox's most popular plan. This is the perfect plan for those who just can't get enough of our unique Mystery Boxes. Go on, we won't judge.",
                            Duration = 12,
                            NewMonthlyPrice = 42.35m
                        },
                        new
                        {
                            SubscriptionCategoryID = 12,
                            BaseMonthlyPrice = 42.75m,
                            CategoryID = 3,
                            Description = "randBox's most popular plan. This is the perfect plan for those who just can't get enough of our unique Mystery Boxes. Go on, we won't judge.",
                            Duration = 12,
                            NewMonthlyPrice = 42.75m
                        });
                });

            modelBuilder.Entity("RandBox.Shared.Domain.SubscriptionItem", b =>
                {
                    b.Property<int>("SubscriptionItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionItemID"));

                    b.Property<int>("MonthOfYear")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionPlanID")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionItemID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SubscriptionPlanID");

                    b.ToTable("SubscriptionItem");

                    b.HasData(
                        new
                        {
                            SubscriptionItemID = 1,
                            MonthOfYear = 12,
                            ProductID = 4,
                            Qty = 1,
                            SubscriptionPlanID = 1
                        },
                        new
                        {
                            SubscriptionItemID = 2,
                            MonthOfYear = 12,
                            ProductID = 2,
                            Qty = 1,
                            SubscriptionPlanID = 1
                        },
                        new
                        {
                            SubscriptionItemID = 3,
                            MonthOfYear = 10,
                            ProductID = 3,
                            Qty = 1,
                            SubscriptionPlanID = 2
                        },
                        new
                        {
                            SubscriptionItemID = 4,
                            MonthOfYear = 11,
                            ProductID = 2,
                            Qty = 1,
                            SubscriptionPlanID = 2
                        });
                });

            modelBuilder.Entity("RandBox.Shared.Domain.SubscriptionPlan", b =>
                {
                    b.Property<int>("SubscriptionPlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionPlanID"));

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubscribedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubscriptionCategoryID")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionPlanID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.HasIndex("SubscriptionCategoryID");

                    b.ToTable("SubscriptionPlan");

                    b.HasData(
                        new
                        {
                            SubscriptionPlanID = 1,
                            CustomerID = 1,
                            SubscribedDateTime = new DateTime(2024, 1, 8, 2, 19, 2, 768, DateTimeKind.Local).AddTicks(909),
                            SubscriptionCategoryID = 12
                        },
                        new
                        {
                            SubscriptionPlanID = 2,
                            CustomerID = 2,
                            SubscribedDateTime = new DateTime(2023, 11, 8, 2, 19, 2, 768, DateTimeKind.Local).AddTicks(912),
                            SubscriptionCategoryID = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RandBox.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RandBox.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandBox.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RandBox.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RandBox.Shared.Domain.Order", b =>
                {
                    b.HasOne("RandBox.Shared.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("RandBox.Shared.Domain.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffID");

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("RandBox.Shared.Domain.OrderItem", b =>
                {
                    b.HasOne("RandBox.Shared.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID");

                    b.HasOne("RandBox.Shared.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RandBox.Shared.Domain.Product", b =>
                {
                    b.HasOne("RandBox.Shared.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.HasOne("RandBox.Shared.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.Navigation("Category");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RandBox.Shared.Domain.SubscriptionCategory", b =>
                {
                    b.HasOne("RandBox.Shared.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RandBox.Shared.Domain.SubscriptionItem", b =>
                {
                    b.HasOne("RandBox.Shared.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandBox.Shared.Domain.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("SubscriptionItems")
                        .HasForeignKey("SubscriptionPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("RandBox.Shared.Domain.SubscriptionPlan", b =>
                {
                    b.HasOne("RandBox.Shared.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("RandBox.Shared.Domain.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffID");

                    b.HasOne("RandBox.Shared.Domain.SubscriptionCategory", "SubscriptionCategory")
                        .WithMany()
                        .HasForeignKey("SubscriptionCategoryID");

                    b.Navigation("Customer");

                    b.Navigation("Staff");

                    b.Navigation("SubscriptionCategory");
                });

            modelBuilder.Entity("RandBox.Shared.Domain.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("RandBox.Shared.Domain.SubscriptionPlan", b =>
                {
                    b.Navigation("SubscriptionItems");
                });
#pragma warning restore 612, 618
        }
    }
}
