@inject ISubscriptionItemService SubscriptionItemService

<div class="mb-4">
    <div class="col d-flex justify-content-between align-items-center mb-4">
        <h3 class="month-header m-0">Month #@(MonthNo) (@dateTimeAfterMonth.ToString("MMMM"))</h3>
        <div class="edit-options col d-flex justify-content-end mx-5">
            <h4 class="option-btn edit-btn m-0 @(IsEditButtonActive() ? "" : "inactive")" @onclick="OpenEditModal">
                <i class="bi bi-pencil" />&nbsp; Edit Item
            </h4>
            <h4 class="option-btn delete-btn m-0 @(IsDeleteButtonActive() ? "" : "inactive")" @onclick="OpenDeleteModal">
                <i class="bi bi-dash-circle" />&nbsp; Remove Items
            </h4>
        </div>
    </div>
    <div class="items-catalogue">
        @if (monthItemsComponents == null)
        {
            <h4 class="no-items-text">Loading items...</h4>
        }
        else if (monthItemsComponents!.Count == 0)
        {
            <h4 class="no-items-text">No items here yet...</h4>
        }
        else
        {
            <ul class="list-unstyled col d-flex justify-content-start flex-wrap gap-4">
                @foreach (var component in monthItemsComponents!)
                {
                    <li class="@(component.Selected ? "selected" : "")" @onclick="@(() => SelectCategory(component))">
                        <ProductCard Product=@component.Item!.Product />
                    </li>
                }
            </ul>
        }
        <button class="btn btn-add mt-2 mb-2" @onclick=@OpenAddItemsModal>Add Items</button>
    </div>
</div>

<CreateEditSubscriptionItemModal @ref="Modal" categoryId="@Subscription!.SubscriptionCategory!.CategoryID" OnSuccessfulSubmit="RefreshItems" />
<DeleteModal @ref="DeleteModal" OnSuccessfulConfirm="DeleteSelected" />

@code {
    [Parameter]
    public SubscriptionPlan? Subscription { get; set; }
    [Parameter]
    public int MonthNo { get; set; }

    public CreateEditSubscriptionItemModal? Modal { get; set; }
    public DeleteModal? DeleteModal { get; set; }

    public List<SubscriptionItem>? Items { get; set; }

    private DateTime dateTimeAfterMonth { get; set; }
    private List<SubscriptionItem>? monthItems { get; set; }
    private List<SubscriptionItemComponent>? monthItemsComponents { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        SubscriptionItemService._httpInterceptorService.RegisterEvent();

        dateTimeAfterMonth = Subscription!.SubscribedDateTime.AddMonths(MonthNo);
        await RefreshItems();
    }

    protected void SelectCategory(SubscriptionItemComponent component)
    {
        component.Selected = !component.Selected;
    }

    protected bool IsEditButtonActive()
    {
        if (monthItemsComponents == null)
        {
            return false;
        }

        return monthItemsComponents!.Count(x => x.Selected) == 1;
    }

    protected bool IsDeleteButtonActive()
    {
        if (monthItemsComponents == null)
        {
            return false;
        }

        return monthItemsComponents!.Count(x => x.Selected) >= 1;
    }

    public void OpenAddItemsModal()
    {
        Modal!.OpenInAddMode(Subscription!, monthItems, MonthNo);
    }

    public void OpenEditModal()
    {
        if (!IsEditButtonActive())
        {
            return;
        }
        var selected = monthItemsComponents!.FirstOrDefault(x => x.Selected)!.Item;
        Modal!.OpenInEditMode(Subscription!, monthItems, selected!);
    }

    public void OpenDeleteModal()
    {
        if (!IsDeleteButtonActive())
        {
            return;
        }
        DeleteModal!.Open();
    }

    protected List<SubscriptionItem> GetItemsByMonth(int month)
    {
        if (Items == null)
        {
            return Enumerable.Empty<SubscriptionItem>().ToList();
        }

        var month_items = Items.FindAll(x => x.MonthOfYear == month);
        return month_items;
    }

    protected async Task RefreshItems()
    {
        Items = await SubscriptionItemService.GetAllByPlan(Subscription!.SubscriptionPlanID);
        monthItems = GetItemsByMonth(dateTimeAfterMonth.Month);
        monthItemsComponents = monthItems.Select(x => new SubscriptionItemComponent
            {
                Item = x,
                Selected = false
            }).ToList();
    }

    protected async Task DeleteSelected()
    {
        var items = monthItemsComponents!.FindAll(x => x.Selected).Select(x => x.Item).ToList();

        foreach (var item in items)
        {
            await SubscriptionItemService.DeleteById(item!.SubscriptionItemID);
        }

        await RefreshItems();
    }

    protected class SubscriptionItemComponent
    {
        public SubscriptionItem? Item { get; set; }
        public bool Selected { get; set; }
    }
}
