@inject ISubscriptionCategoryService SubscriptionCategoryService
@inject ICategoryService CategoryService

<div class="modal modal-dialog-centered @(show ? "show" : "inactive")" id="modal" tabindex="-1">
    <div class="modal-dialog modal-fullscreen">
        <div class="modal-content p-5 m-0">
            <div class="col d-flex justify-content-between align-items-center mx-5 mb-5 flex-grow-0">
                <i class="close-btn bi bi-chevron-left" @onclick=Close> Close without Saving</i>
                <h2 class="modal-title">@(isCreate ? "Add" : "Edit") Plan Category</h2>
                <i class="close-btn inactive bi bi-chevron-left"> Close without Saving</i>
            </div>
            <div class="form-content px-4 mx-auto">
                <EditForm Model="@input" OnValidSubmit="@SubmitCallback" FormName="@($"PlanCategoryForm")">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col mb-3 @(isCreate ? "" : "disabled")">
                            <label class="form-label">
                                Duration (months)
                            </label>
                            <div>
                                <InputNumber class="randbox-form-input" disabled=@(!isCreate) @bind-Value="input!.Duration"></InputNumber>
                                <ValidationMessage For="@(() => input.Duration)" class="mt-1 text-danger" />
                            </div>
                        </div>
                        <div class="col mb-3">
                            <label class="form-label">
                                Base Price
                            </label>
                            <div>
                                <div class="col d-flex align-items-center">
                                    <p class="dollar-prefix">$</p>
                                    <InputNumber class="randbox-form-input" @bind-Value="input!.BaseMonthlyPrice"></InputNumber>
                                    <ValidationMessage For="@(() => input.BaseMonthlyPrice)" class="mt-1 text-danger" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mb-4">
                        <label class="form-label">
                            Description
                        </label>
                        <div>
                            <InputTextArea class="randbox-form-input desc-area" @bind-Value="input!.Description"></InputTextArea>
                            <ValidationMessage For="@(() => input.Description)" class="mt-1 text-danger" />
                        </div>
                    </div>
                    <div class="category-form-section mb-4">
                        <h3>Adjusted Price by Product Category</h3>
                        <p>Default category price is the above base price. Edit the below fields to adjust each category price accordingly for this subscription category</p>
                    </div>
                    @if (input.AdjustedPrices == null)
                    {
                        <h4>> Either an Exception has Occurred or Modal Not Opened Yet...</h4>
                    }
                    else 
                    {
                        <div class="row row-cols-2">
                            @foreach (var adjustedCategoryPrice in input.AdjustedPrices!)
                            {
                                <div class="col mb-1">
                                    <div class="row mb-4">
                                        @if (adjustedCategoryPrice.Category != null)
                                        {
                                            <label class="form-label">
                                                @adjustedCategoryPrice.Category!.Name
                                            </label>
                                            <div>
                                                <div class="col d-flex align-items-center">
                                                    <p class="dollar-prefix">$</p>
                                                    <InputNumber class="randbox-form-input" @bind-Value="adjustedCategoryPrice!.AdjustedPrice"></InputNumber>
                                                    <ValidationMessage For="@(() => adjustedCategoryPrice.AdjustedPrice)" class="mt-1 text-danger" />
                                                </div>
                                               
                                            </div>
                                        }
                                        else
                                        {
                                        }
                                    </div>
                                </div>
                            }
                        </div>

                    }
                    <button type="submit" class="btn btn-submit w-100 mt-2 mb-2">Confirm Changes</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnSuccessfulSubmit { get; set; }

    private EventCallback SubmitCallback { get; set; }

    private InputModel? input { get; set; }
    private bool show = false;
    private bool isCreate { get; set; }

    protected override void OnInitialized()
    {
        SubscriptionCategoryService._httpInterceptorService.RegisterEvent();
        CategoryService._httpInterceptorService.RegisterEvent();

        input = new InputModel();
    }

    public async Task OpenInEditMode(int duration)
    {
        isCreate = false;
        SubmitCallback = EventCallback.Factory.Create(this, SubmitInEditMode);
        var planCategories = await SubscriptionCategoryService.GetAllByDuration(duration);

        if (planCategories != null)
        {
            input = new InputModel
            {
                Description = planCategories[0].Description,
                Duration = planCategories[0].Duration,
                BaseMonthlyPrice = planCategories[0].BaseMonthlyPrice,
                AdjustedPrices = planCategories.Select(x => new AdjustedCategoryPrice
                {
                    SubscriptionCategoryID = x.SubscriptionCategoryID,
                    Category = x.Category!,
                    AdjustedPrice = x.NewMonthlyPrice
                }).ToList()
            };
        }
        else
        {
            input = new InputModel();
        }
        show = true;
        StateHasChanged();
    }

    public async Task OpenInAddMode()
    {
        isCreate = true;
        SubmitCallback = EventCallback.Factory.Create(this, SubmitInAddMode);
        var productCategories = await CategoryService.GetAll();

        if (productCategories != null)
        {
            input = new InputModel
            {
                AdjustedPrices = productCategories.Select(x => new AdjustedCategoryPrice
                {
                    Category = x
                }).ToList()
            };
        }
        else
        {
            input = new InputModel();
        }
        show = true;
        StateHasChanged();
    }

    public void Close()
    {
        SubmitCallback = default(EventCallback);
        input = new InputModel();
        show = false;
        StateHasChanged();
    }

    protected async Task SubmitInEditMode()
    {
        if (input!.AdjustedPrices != null)
        {
            var newSubscriptionCategories = input.AdjustedPrices.Select(x => new SubscriptionCategory
                {
                    SubscriptionCategoryID = x.SubscriptionCategoryID,
                    Description = input.Description,
                    Duration = input.Duration,
                    BaseMonthlyPrice = input.BaseMonthlyPrice,
                    NewMonthlyPrice = x.AdjustedPrice,
                    CategoryID = x.Category!.CategoryID
                }).ToList();

            await SubscriptionCategoryService.Update(input.Duration, newSubscriptionCategories);
            Close();
            await OnSuccessfulSubmit.InvokeAsync();
        }
        else
        {
            // Log a message or handle the case when AdjustedPrices is null
            Console.WriteLine("AdjustedPrices is null. Handle the case accordingly.");
            // You might want to log or throw an exception, or handle it based on your application logic
        }
    }


    protected async Task SubmitInAddMode()
    {
        var newSubscriptionCategories = input!.AdjustedPrices!.Select(x => new SubscriptionCategory
            {
                Description = input!.Description,
                Duration = input!.Duration,
                BaseMonthlyPrice = input!.BaseMonthlyPrice,
                NewMonthlyPrice = x.AdjustedPrice,
                CategoryID = x.Category!.CategoryID
            }).ToList();

        await SubscriptionCategoryService.AddByDuration(input.Duration, newSubscriptionCategories);
        Close();
        await OnSuccessfulSubmit.InvokeAsync();
    }

    public class InputModel
    {
        [Required]
        public string? Description { get; set; }
        [Required]
        public int Duration { get; set; }
        [Required]
        public decimal BaseMonthlyPrice { get; set; }
        [Required]
        public List<AdjustedCategoryPrice>? AdjustedPrices { get; set; }
    }

    public class AdjustedCategoryPrice
    {
        public int SubscriptionCategoryID { get; set; }
        [Required]
        public Category? Category { get; set; }
        public decimal AdjustedPrice { get; set; }
    }
}
