@inject IGenericService<Country> CountryService
@inject IProductService ProductService

<div class="modal modal-dialog-centered @(show ? "show" : "inactive")" id="modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content p-4">
            <div class="col d-flex justify-content-between align-items-center mb-3">
                <i class="close-btn bi bi-chevron-left" @onclick=Close></i>
                <h5 class="modal-title">@(isCreate ? "Add" : "Edit") Country</h5>
                <i class="inactive bi bi-chevron-left"></i>
            </div>
            <div class="px-4">
                <EditForm Model="@input" OnValidSubmit="@SubmitCallback" FormName="@($"CountryForm")">
                    <DataAnnotationsValidator />
                    <div class="row mb-3">
                        <label class="form-label">
                            Name:
                        </label>
                        <div class="">
                            <InputText class="randbox-form-input" @bind-Value="input!.Name"></InputText>
                            <ValidationMessage For="@(() => input.Name)" class="mt-1 text-danger" />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="form-label">
                            Description:
                        </label>
                        <div>
                            <InputTextArea class="randbox-form-input" @bind-Value="input!.Description"></InputTextArea>
                            <ValidationMessage For="@(() => input.Description)" class="mt-1 text-danger" />
                        </div>
                    </div>
                    <div class="row mb-4">
                        <label class="form-label">
                            Badge Colour:
                        </label>
                        <div class="badge-input d-flex align-items-center">
                            <InputText class="randbox-form-input" @bind-Value="input!.BadgeColour"></InputText>
                            <div class="colour-preview" style="background-color: @input!.BadgeColour" />
                        </div>
                        <ValidationMessage For="@(() => input.BadgeColour)" class="mt-1 text-danger" />
                    </div>
                    <button type="submit" class="btn btn-submit w-100 mt-2 mb-2">Confirm Changes</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<div class="modal-backdrop fade @(show ? "show" : "inactive")" />

@code {
    [Parameter]
    public EventCallback OnSuccessfulSubmit { get; set; }

    private EventCallback SubmitCallback { get; set; }

    private InputModel? input { get; set; }
    private bool show = false;
    private bool isCreate { get; set; }

    protected override void OnInitialized()
    {
        CountryService._httpInterceptorService.RegisterEvent();
        ProductService._httpInterceptorService.RegisterEvent();

        input = new InputModel();
    }

    public void OpenInAddMode()
    {
        SubmitCallback = EventCallback.Factory.Create(this, SubmitInAddMode);
        isCreate = true;
        input = new InputModel();
        show = true;
        StateHasChanged();
    }

    public void OpenInEditMode(Country Country)
    {
        SubmitCallback = EventCallback.Factory.Create(this, SubmitInEditMode);
        isCreate = false;
        if (Country != null)
        {
            input = new InputModel
                {
                    CountryID = Country.CountryID,
                    Name = Country.Name,
                    Description = Country.Description,
                    BadgeColour = Country.BadgeColour
                };
        }
        else
        {
            input = new InputModel();
        }
        show = true;
        StateHasChanged();
    }

    public void Close()
    {
        input = new InputModel();
        show = false;
        StateHasChanged();
    }

    protected async Task SubmitInAddMode()
    {
        var Country = new Country
            {
                Name = input!.Name,
                Description = input!.Description,
                BadgeColour = input!.BadgeColour,
                DateTimeCreated = DateTime.Now
            };
        var addedCountry = await CountryService.Insert(Country);
        Close();
        await OnSuccessfulSubmit.InvokeAsync();
    }

    protected async Task SubmitInEditMode()
    {
        var Country = new Country
            {
                CountryID = input!.CountryID,
                Name = input!.Name,
                Description = input!.Description,
                BadgeColour = input!.BadgeColour,
                DateTimeCreated = DateTime.Now
            };
        await CountryService.Update(Country);
        Close();
        await OnSuccessfulSubmit.InvokeAsync();
    }

    public class InputModel
    {
        public int CountryID { get; set; }
        [Required]
        public string? Name { get; set; }
        [Required]
        public string? Description { get; set; }
        [Required]
        [ColourCodeValidator]
        public string? BadgeColour { get; set; }
    }
}
