@inject IOrderService OrderService
@inject IGenericService<Customer> CustomerService
@inject IGenericService<Staff> StaffService
@inject IGenericService<Product> ProductService
@inject IOrderItemService OrderItemService

@if (!(customers == null || staffs == null || products == null))
{
    <!-- Modal for adding or editing orders -->
    <div class="modal modal-dialog-centered @(show ? "show" : "inactive")" id="modal" tabindex="-1">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content p-5 m-0">
                <!-- Header section with title and close button -->
                <div class="col d-flex justify-content-between align-items-center mx-5 mb-5 flex-grow-0">
                    <i class="close-btn bi bi-chevron-left" @onclick=Close> Close without Saving</i>
                    <h2 class="modal-title">@(isCreate ? "Add" : "Edit") Order</h2>
                    <i class="close-btn inactive bi bi-chevron-left"> Close without Saving</i>
                </div>
                <!-- Form content section -->
                <div class="form-content px-4 mx-auto">
                    <!-- EditForm for handling form submission and validation -->
                    <EditForm Model="@input" OnValidSubmit="@SubmitCallback" FormName="@($"OrderForm")">
                        <DataAnnotationsValidator />


                        <!-- Customer dropdown -->
                        <div class="row mb-3">
                            <label class="form-label">Customer</label>
                            <div>
                                <InputSelect class="dropdown randbox-form-input" @bind-Value="input.CustomerID">
                                    <option value="" disabled>Select Customer</option>
                                    @if (customers != null)
                                    {
                                        foreach (var customer in customers!)
                                        {
                                            <option value="@customer.CustID">@($"{customer.CustID} - {customer.FirstName} {customer.LastName}")</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => input.CustomerID)" class="mt-1 text-danger" />
                            </div>
                        </div>

                        <!-- Staff dropdown -->
                        <div class="row mb-3">
                            <label class="form-label">Staff</label>
                            <div>
                                <InputSelect class="dropdown randbox-form-input" @bind-Value="input.StaffID">
                                    <option value="" disabled>Select Staff</option>
                                    @if (staffs != null)
                                    {
                                        foreach (var staff in staffs!)
                                        {
                                            <option value="@staff.StaffID">@($"{staff.StaffID} - {staff.FirstName} {staff.LastName}")</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => input.StaffID)" class="mt-1 text-danger" />
                            </div>
                        </div>

                        <!-- Product dropdown -->
                        <div class="row mb-3">
                            <label class="form-label">Product</label>
                            <div>
                                <InputSelect class="dropdown randbox-form-input" @bind-Value="input!.ProductID">
                                    <option value="" disabled selected>Select Product</option>
                                    @if (products != null)
                                    {
                                        foreach (var product in products!)
                                        {
                                            <option value="@product.ProductID">@product.Name</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => input.ProductID)" class="mt-1 text-danger" />
                            </div>
                        </div>


                        <!-- Quantity input -->
                        <div class="row mb-3">
                            <label class="form-label">Quantity</label>
                            <div>
                                <InputNumber class="randbox-form-input" @bind-Value="input.Quantity"></InputNumber>
                                <ValidationMessage For="@(() => input.Quantity)" class="mt-1 text-danger" />
                            </div>
                        </div>

                        <!-- Button to add order item -->
                        <div class="row mb-3">
                            <div class="col">
                                <button type="button" class="btn btn-sm btn-success" @onclick="(e) => AddOrderItem()">Add Item</button>
                            </div>
                        </div>

                        <!-- List of order items -->
                        <ul class="list-unstyled">
                            @if (orderItems != null)
                            {
                                @foreach (var item in orderItems)
                                {
                                    <li>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span>@($"{item.ProductName} - Qty: {item.Quantity}")</span>
                                            <div class="d-flex">
                                                <!-- Button to remove order item -->
                                                <button type="button" class="btn btn-sm btn-danger" @onclick="(e) => RemoveOrderItem(item)">Remove</button>
                                                <!-- Button to edit order item -->
                                                <button type="button" class="btn btn-sm btn-warning ms-2" @onclick="(e) => EditOrderItem(item)">Edit</button>
                                            </div>
                                        </div>
                                    </li>
                                }
                            }
                        </ul>

                        <!-- Button to confirm changes -->
                        <button type="submit" class="btn btn-submit w-100 mt-2 mb-2">Confirm Changes</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback OnSuccessfulSubmit { get; set; }
    private EventCallback SubmitCallback { get; set; }
    private List<Customer>? customers { get; set; }
    private List<Staff>? staffs { get; set; }
    private List<Product>? products { get; set; }
    private InputModel input = new InputModel();
    private bool show = false;
    private bool isCreate { get; set; }
    private bool isEdit { get; set; }
    private bool isSubmitting = false;
    private OrderItemModel? editedOrderItem;
    private List<OrderItemModel> orderItems = new List<OrderItemModel>();

    protected override async Task OnInitializedAsync()
    {
        ProductService._httpInterceptorService.RegisterEvent();
        StaffService._httpInterceptorService.RegisterEvent();
        CustomerService._httpInterceptorService.RegisterEvent();
        OrderItemService._httpInterceptorService.RegisterEvent();
        OrderService._httpInterceptorService.RegisterEvent();

        products = await ProductService.GetAll();
        customers = await CustomerService.GetAll();
        staffs = await StaffService.GetAll();
    }

    public void OpenInAddMode()
    {
        isCreate = true;
        input = new InputModel
            {
                CustomerID = null,
                StaffID = null,
                
            }; 
        SubmitCallback = EventCallback.Factory.Create(this, async () => await SubmitInAddMode());
        show = true;
        StateHasChanged();
    }

    public void OpenInEditMode(Orders order)
    {
        isCreate = false;

        //initalise order and order items list from the selected order
        input = new InputModel
            {
                CustomerID = order.CustomerID,
                StaffID = order.StaffID,
                OrderID = order.OrderID
                // Populate other properties as needed
            };

        orderItems = order.OrderItems.Select(item => new OrderItemModel
            {
                ProductID = item.ProductID,
                OrderItemID = item.OrderItemID,
                ProductName = item.Product.Name,
                Quantity = item.Qty
            }).ToList();

        SubmitCallback = EventCallback.Factory.Create(this, async () => await SubmitInEditMode(order));
        show = true;
        StateHasChanged();
    }


    // Method to submit the form in add mode
    protected async Task SubmitInAddMode()
    {
        if (isSubmitting)
        {
            return;
        }

        try
        {
            isSubmitting = true;

            // Create a new order object
            var order = new Orders
                {
                    CustomerID = input.CustomerID,
                    StaffID = input.StaffID,
                    DateTimeCheckout = DateTime.Now,
                };

            var orderItemsForOrder = new List<OrderItem>();

            // Create order items from the modal's order items
            foreach (var tempOrderItem in orderItems)
            {
                var product = await ProductService.GetById(tempOrderItem.ProductID ?? 0);

                if (product != null)
                {
                    var orderItem = new OrderItem
                        {
                            ProductID = tempOrderItem.ProductID ?? 0,
                            Qty = tempOrderItem.Quantity ?? 0
                        };

                    orderItemsForOrder.Add(orderItem);
                }
            }

            order.OrderItems = orderItemsForOrder;

            // Insert the order into the database
            await OrderService.Insert(order);

            // Clear order items list in the modal
            orderItems = new List<OrderItemModel>();
            Close();
            await OnSuccessfulSubmit.InvokeAsync();
        }
        finally
        {
            isSubmitting = false;
        }
    }

    protected async Task SubmitInEditMode(Orders order)
    {
        if (isSubmitting)
        {
            return;
        }

        try
        {
            isSubmitting = true;

            // Fetch all existing order items associated with the current order
            var existingOrderItems = await OrderItemService.GetAllByOrder(order!.OrderID);

            // Delete the existing order items
            foreach (var existingOrderItem in existingOrderItems)
            {
                await OrderItemService.DeleteById(existingOrderItem.OrderItemID);
            }

            // Create a new list for the order items from the modal
            var newOrderItems = orderItems.Select(item => new OrderItem
                {
                    ProductID = item.ProductID ?? 0,
                    Qty = item.Quantity ?? 0
                }).ToList();

            // Set the order's OrderItems property to the new list
            order.OrderItems = newOrderItems;

            // Fetch the selected customer and staff
            var selectedCustomer = await CustomerService.GetById(input.CustomerID ?? 0);
            var selectedStaff = await StaffService.GetById(input.StaffID ?? 0);

            // Update other order details including customer and staff
            order.Customer = selectedCustomer;
            order.Staff = selectedStaff;
            await OrderService.Update(order);


            orderItems = new List<OrderItemModel>();
            Close();
            await OnSuccessfulSubmit.InvokeAsync();
            StateHasChanged();
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Close()
    {
        input.ProductID = null;
        input.Quantity = 0;
        orderItems = new List<OrderItemModel>();
        show = false;
        StateHasChanged();
    }

    // Method to remove an order item
    private void RemoveOrderItem(OrderItemModel orderItem)
    {
        if (orderItem != null)
        {
            orderItems.Remove(orderItem);
            StateHasChanged();
        }
    }
   
    // Method to edit an order item, fill in the fields for that order item and remove it from the list
    private void EditOrderItem(OrderItemModel orderItem)
    {
        if (orderItems != null && orderItem != null)
        {
            input.ProductID = orderItem.ProductID;
            input.Quantity = orderItem.Quantity;
            isEdit = true;
            editedOrderItem = orderItem;
            orderItems.Remove(orderItem);
        }
    }

    private void AddOrderItem()
    {
        if (products != null && input.ProductID != null && input.Quantity > 0)
        {
            var selectedProduct = products.FirstOrDefault(p => p.ProductID == input.ProductID);
            if (selectedProduct != null)
            {
                var newOrderItem = new OrderItemModel
                    {
                        ProductID = selectedProduct.ProductID,
                        ProductName = selectedProduct.Name,
                        Quantity = input.Quantity
                    };

                orderItems.Add(newOrderItem); // Add the new order item to the collection

                // Reset input values
                input.ProductID = null;
                input.Quantity = 0;

                StateHasChanged(); // Update the UI
            }
        }
    }

    public class InputModel
    {
        public int OrderID { get; set; }
        [Required]
        public int? CustomerID { get; set; }
        [Required]
        public int? StaffID { get; set; }
        public int? ProductID { get; set; }
        public int? Quantity { get; set; }
    }

    // Input model for the order item entity for the list of order items that will be in each order
    public class OrderItemModel
    {
        public int? ProductID { get; set; }
        public int OrderItemID { get; set; }
        [Required]
        public string? ProductName { get; set; }
        [Required]
        public int? Quantity { get; set; }
    }
}
