@inject IProductService ProductService
@inject ISubscriptionItemService SubscriptionItemService

@if (productComponents == null)
{
    <h4>> Loading Products</h4>
}
else
{
    <div class="modal modal-dialog-centered @(show ? "show" : "inactive")" id="modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content p-5">
                <div class="col d-flex justify-content-between align-items-center mb-3">
                    <i class="close-btn bi bi-chevron-left" @onclick=Close></i>
                    <h2 class="modal-title">@(isCreate ? $"Add Item(s)" : "Edit Item") for Month #@monthNo</h2>
                    <i class="inactive bi bi-chevron-left"></i>
                </div>
                <div class="option-bar col d-flex justify-content-between my-3">
                    <h3 class="available-stock-label">Available Items In Stock</h3>
                    <h3 class="deselect" @onclick=ResetSelection>Deselect All</h3>
                </div>
                <div class="container-carousel p-4">
                    <div class="item-carousel">
                        <ul class="list-unstyled col d-flex flex-wrap mb-0">
                            @foreach (var productComponent in productComponents!)
                            {
                                var product = productComponent.Product;
                                if (itemsAlreadyAdded == null)
                                {
                                    <li class="@(productComponent.Selected ? "selected" : "")" @onclick="@(() => SelectProduct(productComponent))">
                                        <ProductCard Product=@product />
                                    </li>
                                }
                                else 
                                {
                                    if (!itemsAlreadyAdded.Exists(x => x.Product!.ProductID == product!.ProductID))
                                    {
                                        <li class="@(productComponent.Selected ? "selected" : "")" @onclick="@(() => SelectProduct(productComponent))">
                                            <ProductCard Product=@product />
                                        </li>
                                    }
                                }
                            }
                        </ul>
                    </div>
                </div>
                <h3 class="selected-number mt-3">@GetSelectedNo() Item(s) Selected</h3>
                <div class="mx-auto">
                    <button type="submit" class="btn btn-submit mt-2 mb-2" @onclick=SubmitCallback>Confirm Changes</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade @(show ? "show" : "inactive")" />
}

@code {
    [Parameter]
    public int categoryId { get; set; }
    [Parameter]
    public EventCallback OnSuccessfulSubmit { get; set; }

    private EventCallback SubmitCallback { get; set; }

    private List<ProductComponent>? productComponents { get; set; }

    private bool show = false;
    private bool isCreate { get; set; }

    private SubscriptionPlan? subscription { get; set; } 
    private List<SubscriptionItem>? itemsAlreadyAdded { get; set; }
    private int monthNo { get; set; }

    private SubscriptionItem? item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProductService._httpInterceptorService.RegisterEvent();
        SubscriptionItemService._httpInterceptorService.RegisterEvent();

        // Filter and show only category products
        var products = await ProductService.GetProductsByCategory(categoryId);
        productComponents = products.Select(x => new ProductComponent
            {
                Product = x,
                Selected = false
            }).ToList();
    }

    //set all product componenets selected attribute to false
    protected void ResetSelection()
    {
        productComponents = productComponents!.Select(x => new ProductComponent
            {
                Product = x.Product,
                Selected = false
            }).ToList();
    }

    //when selecting one product 
    protected void SelectSingle(int productId)
    {
        productComponents = productComponents!.Select(x => new ProductComponent
            {
                Product = x.Product,
                Selected = productId == x.Product!.ProductID
            }).ToList();
    }

    //if adding can select multiple, if editing only select one product 
    protected void SelectProduct(ProductComponent component)
    {
        // If in edit mode, only select one selection
        if (!isCreate)
        {
            SelectSingle(component.Product!.ProductID);
        }
        else
        {
            component.Selected = !component.Selected;
        }
    }

    protected int GetSelectedNo()
    {
        return productComponents!.FindAll(x => x.Selected).Count;
    }

    //open with empty model
    public void OpenInAddMode(SubscriptionPlan subscription, List<SubscriptionItem>? monthItems, int monthNo)
    {
        SubmitCallback = EventCallback.Factory.Create(this, SubmitInAddMode);
        isCreate = true;
        this.subscription = subscription;
        this.monthNo = monthNo;
        this.itemsAlreadyAdded = monthItems;
        ResetSelection();
        show = true;
        StateHasChanged();
    }

    //open with initalised model from selected sub plan
    public void OpenInEditMode(SubscriptionPlan subscription, List<SubscriptionItem>? monthItems, SubscriptionItem item)
    {
        SubmitCallback = EventCallback.Factory.Create(this, SubmitInEditMode);
        isCreate = false;
        this.subscription = subscription;
        this.itemsAlreadyAdded = monthItems;
        this.itemsAlreadyAdded!.Remove(item);
        SelectSingle(item.Product!.ProductID);
        this.item = item;
        show = true;
        StateHasChanged();
    }

    public void Close()
    {
        show = false;
        StateHasChanged();
    }

    protected async Task SubmitInAddMode()
    {
        var selected = productComponents!.FindAll(x => x.Selected).Select(x => new SubscriptionItem
        {
            ProductID = x.Product!.ProductID,
            Qty = 1,
            MonthOfYear = subscription!.SubscribedDateTime.AddMonths(monthNo).Month,
            SubscriptionPlanID = subscription.SubscriptionPlanID
        }).ToList();
        await SubscriptionItemService.InsertRange(selected);
        Close();
        await OnSuccessfulSubmit.InvokeAsync();
    }

    protected async Task SubmitInEditMode()
    {
        var selected = productComponents!.FindAll(x => x.Selected).Select(x => new SubscriptionItem
            {
                SubscriptionItemID = item!.SubscriptionItemID,
                ProductID = x.Product!.ProductID,
                Qty = 1,
                MonthOfYear = item.MonthOfYear,
                SubscriptionPlanID = item.SubscriptionPlanID
            }).FirstOrDefault();
        if (selected != null)
        {
            await SubscriptionItemService.Update(selected);
        }
        Close();
        await OnSuccessfulSubmit.InvokeAsync();
    }

    // Make a product component so that product entity can be selected or deselected
    protected class ProductComponent
    {
        public Product? Product { get; set; }
        public bool Selected { get; set; }
    }
}
