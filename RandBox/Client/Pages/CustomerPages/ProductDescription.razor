@page "/product-details/{ProductId:int}"
@inject IGenericService<Product> ProductService
@inject IOrderItemService OrderItemService
@inject IOrderService OrderService
@inject IGenericService<Customer> CustomerService

<h2 class="text-center">Product Description</h2>

<div class="row">
    <!-- Left side: Product Image -->
    <div class="col-md-6">
        @if (product != null)
        {
            <div class="product-card-showcase row d-flex" style="margin-top:4rem;">
                <div class="gradient" style="margin-top:3rem;"></div>
                <img src="@product!.ThumbnailURL" class="img-fluid" />
            </div>
        }
        else
        {
            <p>Loading product details...</p>
        }
    </div>

    <!-- Right side: Product Details -->
    <div class="col-md-6">
        <div style="margin-left:1.5em;">
            @if (product != null)
            {
                <p>Snacks</p>
                <h4 style="margin-top:4rem;">@product!.Name</h4>
                <h2>@product!.DiscountedPrice SGD </h2>
                <p>Price</p>

                <hr />
                <p>Status: In Stock (@product.StockNo)    Country: @product?.Country?.Name</p>
                <p>@product!.Description</p>

                <hr />
            }
        </div>
    </div>
</div>

<div>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" @bind="quantity" />
</div>

<div>
    <label for="customerId">Customer:</label>
    <select id="customerId" name="customerId" @bind="input.CustomerID">
        <option value="">Select Customer</option>
        @if (customers != null)
        {
            foreach (var customer in customers)
            {
                <option value="@customer.CustID">@customer.FirstName</option>
            }
        }
    </select>
</div>


<div>
    <label for="orderId">Order:</label>
    <select id="orderId" name="orderId" @bind="input.OrderID">
        <option value="" selected disabled>Select Order</option>
        @if (input.CustomerID != null && orders != null)
        {
            var customerOrders = orders.Where(o => o.CustomerID == input.CustomerID);
            foreach (var order in customerOrders)
            {
                <option value="@order.OrderID">@order.OrderID</option>
            }
        }
    </select>
</div>

<button type="button" class="btn btn-primary" @onclick="() => AddToCart(quantity)">Add to Cart</button>

@code {
    [Parameter]
    public int ProductId { get; set; }
    private List<Orders>? orders;
    private List<Customer>? customers;
    private Product? product;

    protected override async Task OnInitializedAsync()
    {
        ProductService._httpInterceptorService.RegisterEvent();
        OrderItemService._httpInterceptorService.RegisterEvent();
        OrderService._httpInterceptorService.RegisterEvent();
        CustomerService._httpInterceptorService.RegisterEvent();

        product = await ProductService.GetById(ProductId);
        orders = await OrderService.GetAll();
        customers = await CustomerService.GetAll();
    }

    [Parameter]
    public EventCallback OnSuccessfulSubmit { get; set; }
    private EventCallback SubmitCallback { get; set; }

    private InputModel input = new InputModel();
    private int quantity = 0;

    protected async Task AddToCart(int quantity)
    {
        var message = $"Added {quantity} {product!.Name}(s) to the cart.";
        Console.WriteLine(message);

        if (input.CustomerID != null)
        {
            if (input.OrderID == null)
            {
                // If no order is selected, create a new order and add the order item
                var newOrder = new Orders
                    {
                        DateTimeCheckout = DateTime.Now,
                        DeliveryStatus = false,
                        CustomerID = input.CustomerID.Value,
                        OrderItems = new List<OrderItem>
                {
                    new OrderItem
                    {
                        Qty = quantity,
                        ProductID = ProductId
                    }
                }
                    };

                await OrderService.Insert(newOrder);
            }
            else
            {
                // If an order is selected, find the order and add the order item to its list
                var selectedOrder = orders.FirstOrDefault(o => o.OrderID == input.OrderID.Value);

                if (selectedOrder != null)
                {
                    selectedOrder.OrderItems ??= new List<OrderItem>();

                    var orderItem = new OrderItem
                        {
                            Qty = quantity,
                            ProductID = ProductId,
                            OrderID = input.OrderID.Value
                        };

                    selectedOrder.OrderItems.Add(orderItem);
                    await OrderService.Update(selectedOrder);
                }
            }

            product.StockNo -= quantity;
            await ProductService.Update(product);

            await OnSuccessfulSubmit.InvokeAsync();
        }
    }


    public class InputModel
    {
        public int? CustomerID { get; set; }
        public int? OrderID { get; set; }
    }
}
