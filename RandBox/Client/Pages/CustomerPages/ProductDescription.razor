@page "/product-details/{ProductId:int}"
@inject IProductService ProductService
@inject IOrderItemService OrderItemService
@inject IOrderService OrderService
@inject ICustomerService CustomerService
@inject ICartService CartService
@inject NavigationManager Navigation

<div class="col d-flex justify-content-between align-items-center mx-5 mb-5 flex-grow-0">
    <i class="close-btn bi bi-chevron-left" @onclick=Close> Back</i>
    <h2>Product Description</h2>
    <i class="close-btn inactive bi bi-chevron-left"> Back</i>
</div>

<div class="details-div m-5 col d-flex justify-content-center">
    @if (product != null)
    {
        <div class="product-img row">
            <div class="gradient"></div>
            <img src="@product!.ThumbnailURL" class="" />
        </div>
        <div>
            <h5 class="category-text">@product!.Category!.Name</h5>
            <h4 style="margin-top:1rem;">@product!.Name</h4>
            <h2 class="price">$@product!.DiscountedPrice <span>SGD</span> </h2>
            <div class="col d-flex align-items-center mb-4 gap-x-4">
                <p class="m-0 price-label">Price</p>
                <hr class="divider"/>
            </div>
            <p class="info-text">Status : <span class="@(product.StockNo> 0 ? "in-stock" : "out-of-stock")">@(product.StockNo > 0 ? $"In Stock ({product.StockNo})" : "Out of Stock")</span></p>
            <p class="info-text">Country: <span class="country-text" style="color: @product?.Country!.BadgeColour">@product?.Country?.Name</span></p>
            <p class="desc">@product!.Description</p>
            <hr />
            <div class="d-flex col align-items-center gap-x-3">
                <label for="quantity">Quantity: </label>
                <input class="randbox-form-input" type="number" id="quantity" name="quantity" min="1" @bind="quantity" />
            </div>
            <button class="btn btn-submit w-100 mt-4 mb-2" @onclick="AddToCart">Add To Cart</button>
        </div>
    }
</div>


@* <div>
    <label for="customerId">Customer:</label>
    <select id="customerId" name="customerId" @bind="input.CustomerID">
        <option value="">Select Customer</option>
        @if (customers != null)
        {
            foreach (var customer in customers)
            {
                <option value="@customer.CustID">@customer.FirstName</option>
            }
        }
    </select>
</div>


<div>
    <label for="orderId">Order:</label>
    <select id="orderId" name="orderId" @bind="input.OrderID">
        <option value="" selected disabled>Select Order</option>
        @if (input.CustomerID != null && orders != null)
        {
            var customerOrders = orders.Where(o => o.CustomerID == input.CustomerID);
            foreach (var order in customerOrders)
            {
                <option value="@order.OrderID">@order.OrderID</option>
            }
        }
    </select>
</div> *@



@code {
    [Parameter]
    public int ProductId { get; set; }
    private List<Orders>? orders;
    private List<Customer>? customers;
    private Product? product;
    private InputModel input = new InputModel();
    private int quantity = 0;

    protected override async Task OnInitializedAsync()
    {
        ProductService._httpInterceptorService.RegisterEvent();
        //OrderItemService._httpInterceptorService.RegisterEvent();
        //OrderService._httpInterceptorService.RegisterEvent();
        CustomerService._httpInterceptorService.RegisterEvent();

        product = await ProductService.GetById(ProductId);
        //orders = await OrderService.GetAll();
        customers = await CustomerService.GetAll();
    }

    protected async Task AddToCart()
    {
        if (quantity <= 0 || quantity >= 10)
        {
            return;
        }

        var orderItem = new OrderItem
        {
            OrderID = null,
            ProductID = product!.ProductID,
            Product = product!,
            Qty = quantity
        };

        await CartService.Insert(orderItem);

        Navigation.NavigateTo("/cart");
    }

    protected void Close()
    {
        Navigation.NavigateTo("products");
    }

    // OLD Cart system (obselete)
    /*protected async Task AddToCart(int quantity)
    {
        var message = $"Added {quantity} {product!.Name}(s) to the cart.";
        Console.WriteLine(message);

        if (input.CustomerID != null)
        {
            if (input.OrderID == null)
            {
                // If no order is selected, create a new order and add the order item
                var newOrder = new Orders
                    {
                        DateTimeCheckout = DateTime.Now,
                        DeliveryStatus = false,
                        CustomerID = input.CustomerID.Value,
                        OrderItems = new List<OrderItem>
                {
                    new OrderItem
                    {
                        Qty = quantity,
                        ProductID = ProductId
                    }
                }
                    };

                await OrderService.Insert(newOrder);
            }
            else
            {
                // If an order is selected, find the order and add the order item to its list
                var selectedOrder = orders.FirstOrDefault(o => o.OrderID == input.OrderID.Value);

                if (selectedOrder != null)
                {
                    selectedOrder.OrderItems ??= new List<OrderItem>();

                    var orderItem = new OrderItem
                        {
                            Qty = quantity,
                            ProductID = ProductId,
                            OrderID = input.OrderID.Value
                        };

                    selectedOrder.OrderItems.Add(orderItem);
                    await OrderService.Update(selectedOrder);
                }
            }

            product.StockNo -= quantity;
            await ProductService.Update(product);

            await OnSuccessfulSubmit.InvokeAsync();
        }
    }*/


    public class InputModel
    {
        public int? CustomerID { get; set; }
        public int? OrderID { get; set; }
    }
}
