@page "/products"
@inject NavigationManager Navigation
@inject ICategoryService CategoryService
@inject IGenericService<Country> CountryService
@inject IProductService ProductService

<div class="row d-flex justify-content-center mb-5 text-center position-relative">
    <div class="gradient-backdrop"></div>

    <h1 class="page-title mb-4 ">Our Products</h1>
    <h5>View your loot pool here, or buy an item you<br>just can't get enough of!</h5>
</div>

@if(products == null || categories == null || countries == null)
{
    <h4>Loading Product Info</h4>
}
else
{
    <div class="product-section d-flex column">
        <div class="filter-box row d-flex align-tems-stretch">
            <div class="">
                <h3 class="mb-5">Filters</h3>
                <div class="mb-5">
                    <h4 class="filter-title mb-3">Category</h4>
                    @foreach (var checkbox in categoryCheckboxes)
                    {
                        <h4 class="filter-checkbox">
                            <input class="form-check-input" type="checkbox" @bind="checkbox.IsChecked" />
                            @checkbox.Category.Name
                        </h4>
                    }

                </div>
                <div>
                    <h4 class="filter-title mb-3">Country</h4>
                    @foreach (var checkbox in countryCheckboxes)
                    
                    {
                        <h4 class="filter-checkbox">
                            <input class="form-check-input" type="checkbox" @bind="checkbox.IsChecked" />
                            @checkbox.Country.Name
                        </h4>
                        
                    }

                </div>
            </div>
            <button class="btn btn-apply-filter mt-5 mb-2" @onclick="ApplyFilter">Apply Filter</button>
            <button class="btn btn-outline-danger mt-5 mb-2" @onclick="ResetFilter">Reset Filter</button>


        </div>
        <div>
            <div class="position-relative mb-4">
                <i class="bi bi-search search-icon position-absolute" />
                <input class="search-box" placeholder="Search for a product" @oninput="OnSearchInputChange" />
            </div>

            <div class="product-carousel">
                <ul class="list-unstyled col d-flex flex-wrap g-0 m-0">
                    @foreach (var product in filteredProducts!)
                    {
                        <li>
                            <ProductDisplayCard Product=@product />
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
}

@code {
    private List<Category>? categories;
    private List<Country>? countries;
    private List<Product>? products;
    private List<Product>? filteredProducts;
    private List<CategoryCheckbox>? categoryCheckboxes;
    private List<CountryCheckbox>? countryCheckboxes;
    private string searchTerm = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        CategoryService._httpInterceptorService.RegisterEvent();
        CountryService._httpInterceptorService.RegisterEvent();
        ProductService._httpInterceptorService.RegisterEvent();
        filteredProducts = products.Where(p => !p.IsDisabled).ToList();

        categories = await CategoryService.GetAll();
        countries = await CountryService.GetAll();
        products = await ProductService.GetAll();
       
        categoryCheckboxes = categories.Select(c => new CategoryCheckbox { Category = c, IsChecked = false }).ToList();
        countryCheckboxes = countries.Select(c => new CountryCheckbox { Country = c, IsChecked = false }).ToList();
    }

    //when i type filter the products by name
    private void OnSearchInputChange(ChangeEventArgs e)
    {
        searchTerm = e.Value!.ToString()!.ToLower();
        ApplyFilter();
    }


    //reset all the checboxes
    private void ResetFilter()
    {
        foreach (var checkbox in categoryCheckboxes)
        {
            checkbox.IsChecked = false;
        }

        foreach (var checkbox in countryCheckboxes)
        {
            checkbox.IsChecked = false;
        }

        searchTerm = string.Empty;
        ApplyFilter();
    }

    //filter country by country and/or category and search
    private void ApplyFilter()
    {
        var selectedCategories = categoryCheckboxes.Where(c => c.IsChecked).Select(c => c.Category.Name);
        var selectedCountries = countryCheckboxes.Where(c => c.IsChecked).Select(c => c.Country.Name);

        filteredProducts = products
            .Where(p =>
                (!selectedCategories.Any() || selectedCategories.Contains(p.Category.Name)) &&
                (!selectedCountries.Any() || selectedCountries.Contains(p.Country.Name)) &&
                (string.IsNullOrWhiteSpace(searchTerm) || p.Name.ToLower().Contains(searchTerm))
            )
            .ToList();
    }



    // Helper classes to store the checkbox state
    public class CategoryCheckbox
    {
        public Category Category { get; set; }
        public bool IsChecked { get; set; }
    }

    public class CountryCheckbox
    {
        public Country Country { get; set; }
        public bool IsChecked { get; set; }
    }

}
