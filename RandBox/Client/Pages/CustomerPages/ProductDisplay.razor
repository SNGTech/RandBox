@page "/products"
@inject NavigationManager Navigation
@inject IGenericService<Category> CategoryService
@inject IGenericService<Country> CountryService
@inject IGenericService<Product> ProductService

<div class="row d-flex justify-content-center mb-5 text-center position-relative">
    <div class="gradient-backdrop"></div>

    <h1 class="page-title mb-4 ">Our Products</h1>
    <h5>View your loot pool here, or buy an item you<br>just can't get enough of!</h5>
</div>

@if(products == null || categories == null || countries == null)
{
    <h4>Loading Product Info</h4>
}
else
{
    <div class="product-section d-flex column">
        <div class="filter-box row d-flex align-tems-stretch">
            <div class="">
                <h3 class="mb-5">Filters</h3>
                <div class="mb-5">
                    <h4 class="filter-title mb-3">Category</h4>
                        @foreach (var category in categories)
                        {
                            <h4 class="filter-checkbox"><input class="form-check-input" type="checkbox" value="@category.Name" />@category.Name</h4>
                        }
                </div>
                <div>
                    <h4 class="filter-title mb-3">Country</h4>
                    @foreach (var country in countries)
                    {
                        <h4 class="filter-checkbox"><input class="form-check-input" type="checkbox" value="@country.Name" />@country.Name</h4>
                    }
                </div>
            </div>
            <button class="btn btn-apply-filter mt-5 mb-2">Apply Filter</button>
        </div>
        <div>
            <div class="position-relative mb-4">
                <i class="bi bi-search search-icon position-absolute" />
                <input class="search-box" placeholder="Search for a product" @oninput="OnSearchInputChange" />
            </div>

            <div class="product-carousel">
                <ul class="list-unstyled col d-flex flex-wrap g-0 m-0">
                    @foreach (var product in filteredProducts!)
                    {
                        <li>
                            <ProductDisplayCard Product=@product />
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
}

@code {
    private List<Category>? categories;
    private List<Country>? countries;
    private List<Product>? products;
    private List<Product>? filteredProducts;

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetAll();
        countries = await CountryService.GetAll();
        products = await ProductService.GetAll();
        filteredProducts = products;
    }

    private void OnSearchInputChange(ChangeEventArgs e)
    {
        string searchTerm = e.Value!.ToString()!.ToLower();
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredProducts = products?.Where(p => p.Name!.ToLower().Contains(searchTerm)).ToList();
        }
        else
        {
            filteredProducts = products;
        }
    }
}
