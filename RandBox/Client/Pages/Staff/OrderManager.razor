@page "/staff/purchases"
@inject IGenericService<Orders> OrderService
@inject IOrderItemService OrderItemService
@inject IGenericService<Customer> CustomerService
@inject NavigationManager Navigation

@if (OrderComponents == null)
{
    <h4>Loading Orders</h4>
}
else
{
    <div class="col d-flex justify-content-between align-items-center mb-4">
        <h3 class="m-0">Orders</h3>
        <div class="position-relative">
            <i class="bi bi-search search-icon position-absolute" />
            <input class="search-box" placeholder="Search Order ID">
        </div>
    </div>

    <div class="options-bar col d-flex mb-4">
        <h4 class="option-btn add-btn m-0" @onclick="OpenAddModal">
            Add Order
        </h4>
        <h4 class="option-btn edit-btn m-0 @(IsEditButtonActive() ? "" : "inactive")" @onclick="OpenEditModal">
            Edit Order
        </h4>
        
        <h4 class="option-btn delete-btn m-0 @(IsDeleteButtonActive() ? "" : "inactive")" @onclick="OpenDeleteModal">
            Remove Order 
        </h4>
    </div>

    <CreateEditOrderModal @ref="Modal" OnSuccessfulSubmit="RefreshOrders" />
    <DeleteModal @ref="DeleteModal" OnSuccessfulConfirm="DeleteSelectedOrders" />

    <table class="table">
        <thead>
            <tr>
                <th class="edge-cell-left" scope="col">#Id</th>
                <th scope="col">Order Date</th>
                <th scope="col">Total Price</th>
                <th scope="col">Customer</th>
                <th scope="col">Staff In-charge</th>
                <th class="edge-cell-right" scope="col">Delivery Status (cur. month)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var component in OrderComponents!)
            {
                var order = component.Order;
                var items = component.Order!.OrderItems;
                var totalPrice = order!.OrderItems?.Sum(item => item.Qty * item.Product!.DiscountedPrice) ?? 0;

                <tr class="body-row @(component.Selected ? "selected" : "")" @onclick="@(() => SelectOrder(component))">
                    <td class="edge-cell-left">@order.OrderID</td>
                    <td>@order.DateTimeCheckout.ToString("dd.MM.yy")</td>
                    <td>$@totalPrice</td>

                    <td>@(order.Customer != null ? order.Customer.FirstName : "N/A")</td>
                    <td class="@(order.Staff == null ? "warn" : "")">
                        @(order.Staff == null ? "Needs an IC" : order.Staff.FirstName)
                    </td>
                    <td class="edge-cell-right"></td>
                    <td class="additional-info collapsible @(component.Selected ? "expand" : "" )">
                        <table class="table additional-info-table m-0">
                            <thead>
                                <tr>
                                    <th class="edge-cell-left" scope="col">Product Id</th>
                                    <th scope="col">Product Name</th>
                                    <th scope="col">Price</th>
                                    <th scope="col">Quantity</th>
                                    <th class="edge-cell-right" scope="col">Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in items!)
                                {
                                    <tr>
                                        <td class="edge-cell-left">@item.Product!.ProductID</td>
                                        <td>@item.Product!.Name</td>
                                        <td>@item.Product!.DiscountedPrice</td>
                                        <td>@item.Qty</td>
                                        <td class="edge-cell-right">$@(item.Product!.DiscountedPrice * item.Qty)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<OrderComponent>? OrderComponents { get; set; }

    private CreateEditOrderModal? Modal;
    private DeleteModal? DeleteModal;

    protected override async Task OnInitializedAsync()
    {
        await RefreshOrders();
    }

    protected void SelectOrder(OrderComponent component)
    {
        component.Selected = !component.Selected;
    }

    protected bool IsEditButtonActive()
    {
        return OrderComponents!.Count(x => x.Selected) == 1;
    }

    protected bool IsDeleteButtonActive()
    {
        return OrderComponents!.Count(x => x.Selected) >= 1;
    }

    protected void OpenAddModal()
    {
        Modal!.OpenInAddMode();
    }

    protected void OpenEditModal()
    {
        if (!IsEditButtonActive())
        {
            return;
        }
        var order = OrderComponents!.FirstOrDefault(x => x.Selected)!.Order;
        Modal!.OpenInEditMode(order!);
    }

    protected void OpenDeleteModal()
    {
        if (!IsDeleteButtonActive())
        {
            return;
        }
        DeleteModal!.Open();
    }

    protected async Task DeleteSelectedOrders()
    {
        var selectedOrders = OrderComponents!.FindAll(x => x.Selected).Select(x => x.Order).ToList();

        foreach (var order in selectedOrders)
        {
            await OrderService.DeleteById(order!.OrderID);
        }

        await RefreshOrders();
    }

    protected async Task RefreshOrders()
    {
        var orders = await OrderService.GetAll();
        if (orders == null)
        {
            OrderComponents = null;
        }
        else
        {
            OrderComponents = orders!.Select(x => new OrderComponent
                {
                    Order = x,
                    Selected = false
                }
            ).ToList();
        }
    }
    public class OrderComponent
    {
        public Orders? Order { get; set; }
        public bool Selected { get; set; }
        public List<OrderItem> OrderItems { get; set; } = new List<OrderItem>();
    }

}



