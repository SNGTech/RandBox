@page "/staff/subscriptions"
@inject IGenericService<SubscriptionPlan> SubscriptionService
@inject NavigationManager Navigation

@if (subscriptions == null || filteredSubscriptionComponents == null)
{
    <h4>> Loading Subscriptions</h4>
}
else 
{
    <div class="col d-flex justify-content-between align-items-center mb-4">
        <h3 class="m-0">Subscriptions</h3>
        <div class="position-relative">
            <i class="bi bi-search search-icon position-absolute" />
            <input class="search-box" placeholder="Search SubscriptionID" @oninput="FilterSubscriptions" />
        </div>
    </div>

    <div class="options-bar col d-flex mb-4">
        <h4 class="option-btn add-btn m-0" @onclick=OpenAddModal>
            Add Subscription
        </h4>
        <h4 class="option-btn unsubscribe-btn m-0 @(IsUnsubscribeButtonActive() ? "" : "inactive")" @onclick=OpenDeleteModal>
            Unsubscribe
        </h4>
        <h4 class="option-btn handle-btn m-0 @(IsHandleButtonActive() ? "": "inactive")" @onclick=NavigateToHandleSubscription>
            Handle Subscription
        </h4>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th class="edge-cell-left" scope="col">#Id</th>
                <th scope="col">Start Date</th>
                <th scope="col">End Date</th>
                <th scope="col">Monthly Price</th>
                <th scope="col">Customer</th>
                <th scope="col">Staff In-charge</th>
                <th class="edge-cell-right" scope="col">Delivery Status (cur. month)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var component in filteredSubscriptionComponents!)
            {
                var subscription = component.SubscriptionPlan;
                DateTime endDate = subscription!.SubscribedDateTime.AddMonths(subscription.SubscriptionCategory!.Duration);
                <tr class="body-row @(component.Selected ? "selected" : "") @(HasEnded(endDate) ? "ended": "")" @onclick="@(() => SelectSubscription(component))">
                    <th class="edge-cell-left" scope="row">@subscription!.SubscriptionPlanID</th>
                    <td>@subscription.SubscribedDateTime.ToString("dd.MM.yy", CultureInfo.InvariantCulture)</td>
                    <td class="@(HasEnded(endDate) ? "warn" : "")">
                        @(HasEnded(endDate) ? "Ended" : endDate.ToString("dd.MM.yy", CultureInfo.InvariantCulture))
                    </td>
                    <td>$@subscription.SubscriptionCategory!.NewMonthlyPrice</td>
                    <td>@subscription.Customer!.FirstName</td>
                    <td class="@(subscription.Staff == null ? "warn" : "")">
                        @(subscription.Staff == null ? "Needs an IC" : subscription.Staff.FirstName)
                    </td>
                    <td class="edge-cell-right"></td>
                    <td class="additional-info collapsible @(component.Selected ? "expand" : "")">
                        <div class="col d-flex justify-content-between">
                            <p>Subscription Duration: <span>@subscription.SubscriptionCategory.Duration month@(subscription.SubscriptionCategory.Duration > 1 ? "s" : "")</span></p>
                            <p>No. of Days Till End of Subscription: <span>@(HasEnded(endDate) ? "Ended" : (endDate - DateTime.Now).Days) days</span></p>
                            <p>Monthly Payment: <span>$@subscription.SubscriptionCategory.NewMonthlyPrice</span></p>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<CreateSubscriptionModal @ref="Modal" OnSuccessfulSubmit="RefreshSubscriptions" />
<DeleteModal @ref="DeleteModal" OnSuccessfulConfirm="DeleteSelectedSubscriptions" />

@code {
    private List<SubscriptionPlan>? subscriptions { get; set; }
    private List<SubscriptionComponent>? filteredSubscriptionComponents { get; set; }

    private CreateSubscriptionModal? Modal;
    private DeleteModal? DeleteModal;

    protected override async Task OnInitializedAsync()
    {
        await RefreshSubscriptions();
    }

    private void SelectSubscription(SubscriptionComponent component)
    {
        component!.Selected = !component.Selected;
    }

    private void FilterSubscriptions(ChangeEventArgs e)
    {
        string? search = e.Value!.ToString();
        if (search != null && search != "")
        {
            var filtered = subscriptions!.FindAll(x => x.SubscriptionPlanID.ToString().StartsWith(search!));
            filteredSubscriptionComponents = MapSubscriptionToComponent(filtered);
        }
        else
        {
            filteredSubscriptionComponents = MapSubscriptionToComponent(subscriptions!);
        }
    }

    protected bool HasEnded(DateTime endDate)
    {
        return (endDate - DateTime.Now).Days < 0;
    }

    protected bool IsHandleButtonActive()
    {
        return filteredSubscriptionComponents!.Count(x => x.Selected) == 1;
    }

    protected bool IsUnsubscribeButtonActive()
    {
        return filteredSubscriptionComponents!.Count(x => x.Selected) >= 1;
    }
    protected void OpenAddModal()
    {
        Modal!.Open();
    }

    protected void OpenDeleteModal()
    {
        if (!IsUnsubscribeButtonActive())
        {
            return;
        }
        DeleteModal!.Open();
    }

    protected void NavigateToHandleSubscription()
    {
        if(!IsHandleButtonActive())
        {
            return;
        }

        var selectedSubscription = filteredSubscriptionComponents!.FirstOrDefault(x => x.Selected);
        Navigation.NavigateTo($"/staff/subscriptions/{selectedSubscription!.SubscriptionPlan!.SubscriptionPlanID}");
    }

    private List<SubscriptionComponent> MapSubscriptionToComponent(List<SubscriptionPlan> subscriptions)
    {
        return subscriptions.Select(x => new SubscriptionComponent
        {
            SubscriptionPlan = x,
            Selected = false
        }).ToList();
    }

    protected async Task DeleteSelectedSubscriptions()
    {
        var subscriptions = filteredSubscriptionComponents!.FindAll(x => x.Selected).Select(x => x.SubscriptionPlan).ToList();

        foreach (var subscription in subscriptions)
        {
            await SubscriptionService.DeleteById(subscription!.SubscriptionPlanID);
        }

        await RefreshSubscriptions();
    }

    protected async Task RefreshSubscriptions()
    {
        subscriptions = await SubscriptionService.GetAll();
        filteredSubscriptionComponents = MapSubscriptionToComponent(subscriptions);
    }

    public class SubscriptionComponent
    {
        public SubscriptionPlan? SubscriptionPlan { get; set; }
        public bool Selected { get; set; }
    }
}