@page "/staff/subscriptions/{SubscriptionPlanId:int}"
@inject IGenericService<SubscriptionPlan> SubscriptionService
@inject NavigationManager Navigation

@if (subscription == null)
{
    <h4>> Loading Subscription Details</h4>
}
else
{
    <div class="mb-5">
        <i class="close-btn bi bi-chevron-left" @onclick=GoBack> Back</i>
        <h3 class="title mb-3">Edit Subscription Details</h3>
        <h4 class="id mb-4">ID: @subscription!.SubscriptionPlanID</h4>
        <div class="additional-info col d-flex justify-content-between mb-3">
            <p>Subscription Duration: <span>@subscription.SubscriptionCategory!.Duration month@(subscription.SubscriptionCategory.Duration > 1 ? "s" : "")</span></p>
            <p>No. of Days Till End of Subscription: <span>@GetCurrentDuration()</span></p>
            @* TODO: MAKE THE BELOW WORK *@
            <p>Total Paid To Date: <span>$82.76</span></p>
        </div>
        <div class="warn-info-div">
            <h3 class="info-text">1 out of 4 months completed</h3>
            <h3 class="warn-text"></h3>
        </div>
        <div class="content">
            @for(int i = 0; i < subscription.SubscriptionCategory!.Duration; i++)
            {
                <div class="mb-4">
                    <h3 class="month-header">Month #@(i + 1) (@subscription.SubscribedDateTime.AddMonths(i).ToString("MMMM"))</h3>
                    <div class="items-catalogue">
                        @* @if(GetSubscriptionItems(i + 1) == null)
                        {
                            <h4 class="no-items-text">No items here yet...</h4>
                        }
                        else
                        {
                            @foreach ()
                            {

                            }
                        } *@
                        <button class="btn btn-add mt-2 mb-2">Add Items</button>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int SubscriptionPlanId { get; set; }

    private SubscriptionPlan? subscription;

    protected override async Task OnInitializedAsync()
    {
        subscription = await SubscriptionService.GetById(SubscriptionPlanId); 
    }

    public void OpenAddItemsModal()
    {

    }

    private int GetCurrentDuration()
    {
        DateTime endDate = subscription!.SubscribedDateTime.AddMonths(subscription.SubscriptionCategory!.Duration);
        return (endDate - DateTime.Now).Days;
    }

    public void GoBack()
    {
        Navigation.NavigateTo("/staff/subscriptions");
    }
}