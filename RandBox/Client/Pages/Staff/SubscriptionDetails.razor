@page "/staff/subscriptions/{SubscriptionPlanId:int}"
@inject IGenericService<SubscriptionPlan> SubscriptionService
@inject ISubscriptionItemService SubscriptionItemService
@inject NavigationManager Navigation

@if (items == null || subscription == null)
{
    <h4>> Loading Subscription Details</h4>
}
else
{
    var duration = subscription.SubscriptionCategory!.Duration;
    <div class="mb-5">
        <i class="close-btn bi bi-chevron-left" @onclick=GoBack> Back</i>
        <h3 class="title mb-3">Edit Subscription Details</h3>
        <h4 class="id mb-4">ID: @subscription!.SubscriptionPlanID</h4>
        <div class="additional-info col d-flex justify-content-between mb-3">
            <p>Subscription Duration: <span>@duration month@(subscription.SubscriptionCategory.Duration > 1 ? "s" : "")</span></p>
            <p>No. of Days Till End of Subscription: <span>@GetCurrentDuration()</span></p>
            @* TODO: MAKE THE BELOW WORK *@
            <p>Total Paid To Date: <span>$82.76</span></p>
        </div>
        <div class="warn-info-div">
            <h3 class="info-text">1 out of @duration months completed</h3>
            <h3 class="warn-text"></h3>
        </div>
        <div class="content">
            @for(int i = 0; i < subscription.SubscriptionCategory!.Duration; i++)
            {
                int monthNo = i + 1;
                <MonthItemsEditor Subscription="subscription" Items="items" MonthNo="monthNo" Modal="Modal" DeleteModal="DeleteModal" />            }
        </div>
    </div>
}

<CreateEditSubscriptionItemModal @ref="Modal" OnSuccessfulSubmit="RefreshItems" />

@code {
    [Parameter]
    public int SubscriptionPlanId { get; set; }

    private List<SubscriptionItem> items = new List<SubscriptionItem>();

    public CreateEditSubscriptionItemModal? Modal { get; set; }
    public DeleteModal? DeleteModal { get; set; }

    private SubscriptionPlan? subscription;

    protected override async Task OnInitializedAsync()
    {
        //subscription = await SubscriptionService.GetById(SubscriptionPlanId);
        await RefreshItems();
    }

    public async Task RefreshItems()
    {
        items = await SubscriptionItemService.GetAllByPlan(subscription!.SubscriptionPlanID);
    }

    private int GetCurrentDuration()
    {
        DateTime endDate = subscription!.SubscribedDateTime.AddMonths(subscription.SubscriptionCategory!.Duration);
        return (endDate - DateTime.Now).Days;
    }

    public void GoBack()
    {
        Navigation.NavigateTo("/staff/subscriptions");
    }
}