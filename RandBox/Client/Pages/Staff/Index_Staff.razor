@page "/staff/dashboard"
@inject ICustomerService CustomerService
@inject IOrderService OrderService
@inject ISubscriptionPlanService SubscriptionService
@inject ISubscriptionCategoryService SubscriptionCategoryService
@attribute [Authorize(Policy = "StaffPolicy")]

@if (customers == null || subscriptions == null || orders == null)
{
    <h4>> Loading Dashboard</h4>
}
else {
    <section class="">
        <h4 class="mb-6">Welcome Staff</h4>

        <div class="col d-flex justify-content-between">
            <div class="subContainer text-center">
                <div class="info">Total Subscriptions</div>
                <div class="info-number">@subscriptions.Count</div>
            </div>

            <div class="usersContainer text-center">
                <div class="info">Total No. of Users</div>
                <div class="info-number">@customers!.Count</div>
            </div>

            <div class="salesContainer text-center">
                <div class="info">Total Product Sales</div>
                <div class="info-number">$@totalIncome</div>
            </div>
        </div>

        <div class="row mt-6">
            <div class="col">
                <h3 class="mb-2 graph-title">Product Sales Over Time</h3>
                <div class="graph-card">
                    <MudChart ChartType="ChartType.Line" ChartSeries="@salesSeries" @bind-SelectedIndex="lineIndex" XAxisLabels="@monthLabels" Width="100%" Height="350px" ChartOptions="@lineOptions" />
                </div>
            </div>
            <div class="col">
                <h3 class="mb-2 graph-title">Breakdown Count of Subscriptions Per Duration</h3>
                <div class="graph-card graph-pie">
                    <MudChart ChartType="ChartType.Pie" InputData="@countSeries" @bind-SelectedIndex="pieIndex" InputLabels="@durationLabels" Width="100%" Height="300px" />
                </div>
            </div>
        </div>
    </section>
}

@code {
    private List<Customer>? customers;
    private List<Orders>? orders;
    private List<SubscriptionPlan>? subscriptions;

    private decimal totalIncome = 0M;

    // Data Point Vars
    private int lineIndex = -1;
    private ChartOptions lineOptions = new ChartOptions();
    private List<ChartSeries> salesSeries = new List<ChartSeries>();
    private string[] monthLabels = new string[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

    // Pie Chart Vars
    private int pieIndex = -1;
    private double[] countSeries = new double[] { };
    private string[] durationLabels = new string[] { };

    protected override async Task OnInitializedAsync()
    {
        CustomerService._httpInterceptorService.RegisterEvent();
        OrderService._httpInterceptorService.RegisterEvent();
        SubscriptionService._httpInterceptorService.RegisterEvent();
        SubscriptionCategoryService._httpInterceptorService.RegisterEvent();

        customers = await CustomerService.GetAll();
        orders = await OrderService.GetAll();
        subscriptions = await SubscriptionService.GetAll();

        decimal totalFromOrders = await OrderService.GetTotalIncomeFromOrders();
        decimal totalFromSubscriptions = 0M;
        totalIncome = totalFromOrders + totalFromSubscriptions;

        // Initialise graph data

        // Sales Data
        lineOptions.LineStrokeWidth = 3;
        var monthSales = await OrderService.GetOrderSalesMonthly();
        salesSeries.Add(new ChartSeries()
        {
            Name = "Sales (SGD)",
            Data = monthSales.Select(x => Decimal.ToDouble(x)).ToArray()
        });

        // Pie Chart Data
        var durations = await SubscriptionCategoryService.GetAllDurations();
        var durationCounts = await SubscriptionService.GetSubscriptionCountByDuration();
        durationLabels = durations.Select(x => x.ToString() + " " + (x > 1 ? "months" : "month")).ToArray();
        countSeries = durationCounts.Select(x => Decimal.ToDouble(x)).ToArray();
    }
}