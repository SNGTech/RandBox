@page "/pricing/checkout/{cat_id:int}"
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IPaymentIntentService PaymentIntentService
@inject ISubscriptionPlanService SubscriptionService
@inject ICustomerService CustomerService
@inject AuthenticationStateProvider AuthenticationStateProvider 

<AuthorizeView Policy="CustomerPolicy">
    <section class="row d-flex justify-content-center align-items-center">
        <h3>Processing Subscription Purchase...</h3>

        @* <form class="row d-flex justify-content-center w-50" @onsubmit=Checkout id="payment-form">
            <div id="link-authentication-element">
                <!--Stripe.js injects the Link Element-->
            </div>
            <div id="address-element">
                <!--Stripe.js injects the Address Element-->
            </div>
            <div id="payment-element">
                <!--Stripe.js injects the Payment Element-->
            </div>
            <button class="btn btn-pay" id="submit">
                <div class="spinner hidden" id="spinner"></div>
                <span id="button-text">Checkout</span>
            </button>
            <div id="payment-message" class="hidden"></div>
        </form> *@
    </section>
</AuthorizeView>

@code {
    [Parameter]
    public int cat_id { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        /*var email = "test.sngtech@gmail.com";
        var response = await PaymentIntentService.CreatePaymentIntent(id, email);

        await JSRuntime.InvokeVoidAsync("SubscriptionCheckout.initialise", response); */
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var currentCustomer = await CustomerService.GetCurrentCustomer(authState.User.Identity?.Name!);

        if (currentCustomer == null)
        {
            return;
        }

        var newSubscription = new SubscriptionPlan {
            SubscribedDateTime = DateTime.Now,
            SubscriptionCategoryID = cat_id,
            CustomerID = currentCustomer.CustID,
            StaffID = null
        };

        await SubscriptionService.Insert(newSubscription);

        Navigation.NavigateTo("pricing");
    }

    /*protected async Task Checkout(EventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("SubscriptionCheckout.handleSubmit", e);
    }*/
}
