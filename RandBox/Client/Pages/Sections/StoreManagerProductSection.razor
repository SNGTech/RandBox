@inject IGenericService<Product> ProductService

@if (productComponents == null)
{
    <h4>> Loading Products</h4>
}
else
{
    <div class="info-bar col d-flex justify-content-start align-items-center">
        <h3 class="page-info m-0">All Products</h3>
        <div class="edit-options col d-flex">
            <h4 class="option-btn add-btn m-0" @onclick="OpenAddModal">
                <i class="bi bi-plus-circle" />&nbsp; Add Product
            </h4>
            <h4 class="option-btn edit-btn m-0 @(IsEditButtonActive() ? "" : "inactive")" @onclick="OpenEditModal">
                <i class="bi bi-pencil" />&nbsp; Edit Product
            </h4>
            <h4 class="option-btn delete-btn m-0 @(IsDeleteButtonActive() ? "" : "inactive")" @onclick="OpenDeleteModal">
                <i class="bi bi-dash-circle" />&nbsp; Remove Product
            </h4>
        </div>
    </div>
    <div class="item-carousel">
        <ul class="list-unstyled col d-flex flex-wrap">
            @foreach (var productComponent in productComponents!)
            {
                var product = productComponent.Product;
                <li class="@(productComponent.Selected ? "selected" : "")" @onclick="@(() => SelectProduct(productComponent))">
                    <ProductCard Product=@product />
                </li>
            }
        </ul>
    </div>

    <CreateEditProductModal @ref="Modal" OnSuccessfulSubmit="RefreshProducts" />
    <DeleteModal @ref="DeleteModal" OnSuccessfulConfirm="DeleteSelectedProducts" />
}

@code {
    private List<ProductComponent>? productComponents { get; set; }

    private CreateEditProductModal? Modal;
    private DeleteModal? DeleteModal;

    protected override async Task OnInitializedAsync()
    {
        ProductService._httpInterceptorService.RegisterEvent();

        await RefreshProducts();
    }

    protected void SelectProduct(ProductComponent component)
    {
        component.Selected = !component.Selected;
    }

    protected bool IsEditButtonActive()
    {
        return productComponents!.Count(x => x.Selected) == 1;
    }

    protected bool IsDeleteButtonActive()
    {
        return productComponents!.Count(x => x.Selected) >= 1;
    }

    protected void OpenAddModal()
    {
        Modal!.OpenInAddMode();
    }

    protected void OpenEditModal()
    {
        if (!IsEditButtonActive())
        {
            return;
        }
        var product = productComponents!.FirstOrDefault(x => x.Selected)!.Product;
        Modal!.OpenInEditMode(product!);
    }

    protected void OpenDeleteModal()
    {
        if (!IsDeleteButtonActive())
        {
            return;
        }
        DeleteModal!.Open();
    }

    protected async Task DeleteSelectedProducts()
    {
        var products = productComponents!.FindAll(x => x.Selected).Select(x => x.Product).ToList();

        foreach (var product in products)
        {
          
            await ProductService.DeleteById(product!.ProductID);
        }

        await RefreshProducts();
    }

    protected async Task RefreshProducts()
    {
        var products = await ProductService.GetAll();
        productComponents = products!.Select(x => new ProductComponent
        {
            Product = x,
            Selected = false
        }
        ).ToList();
    }

    protected class ProductComponent
    {
        public Product? Product { get; set; }
        public bool Selected { get; set; }
    }
}