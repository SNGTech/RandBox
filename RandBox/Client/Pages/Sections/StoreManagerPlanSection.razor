@inject ISubscriptionCategoryService SubscriptionCategoryService

@if (planComponents == null)
{
    <h4>> Loading Plan Categories</h4>
}
else
{
    <div class="info-bar col d-flex justify-content-start align-items-center">
        <h3 class="page-info m-0">All Plan Categories</h3>
        <div class="edit-options col d-flex">
            <h4 class="option-btn add-btn m-0" @onclick="OpenAddModal">
                <i class="bi bi-plus-circle" />&nbsp; Add Plan Category
            </h4>
            <h4 class="option-btn edit-btn m-0 @(IsEditButtonActive() ? "" : "inactive")" @onclick="OpenEditModal">
                <i class="bi bi-pencil" />&nbsp; Edit Plan Category
            </h4>
            <h4 class="option-btn delete-btn m-0 @(IsDeleteButtonActive() ? "" : "inactive")" @onclick="OpenDeleteModal">
                <i class="bi bi-dash-circle" />&nbsp; Remove Plan Category
            </h4>
        </div>
    </div>

    <CreateEditPlanCategoryModal @ref="Modal" OnSuccessfulSubmit="RefreshPlanCategories" />
    <DeleteModal @ref="DeleteModal" OnSuccessfulConfirm="DeleteByDuration" />

    <div class="item-carousel">
        <ul class="list-unstyled col d-flex align-items-center flex-wrap">
            @foreach (var planComponent in planComponents!)
            {
                var planCategory = planComponent.SubscriptionCategory;
                <li class="@(planComponent.Selected ? "selected" : "")" @onclick="@(() => SelectPlanCategory(planComponent))">
                    <SubscriptionCategoryCard SubscriptionCategory=planCategory />
                </li>
            }
        </ul>
    </div>
}

@code {
    private List<SubscriptionCategoryComponent>? planComponents { get; set; }

    public CreateEditPlanCategoryModal? Modal;
    public DeleteModal? DeleteModal;

    protected override async Task OnInitializedAsync()
    {
        await RefreshPlanCategories();
    }

    protected void SelectPlanCategory(SubscriptionCategoryComponent component)
    {
        component.Selected = !component.Selected;
    }

    protected bool IsEditButtonActive()
    {
        return planComponents!.Count(x => x.Selected) == 1;
    }

    protected bool IsDeleteButtonActive()
    {
        return planComponents!.Count(x => x.Selected) >= 1;
    }

    protected async Task OpenAddModal()
    {
        await Modal!.OpenInAddMode();
    }

    protected async Task OpenEditModal()
    {
        if (!IsEditButtonActive())
        {
            return;
        }
        var duration = planComponents!.FirstOrDefault(x => x.Selected)!.SubscriptionCategory!.Duration;
        await Modal!.OpenInEditMode(duration);
    }

    protected void OpenDeleteModal()
    {
        if (!IsDeleteButtonActive())
        {
            return;
        }

        DeleteModal!.Open();
    }

    protected async Task DeleteByDuration()
    {
        var durations = planComponents!.FindAll(x => x.Selected).Select(x => x.SubscriptionCategory!.Duration).ToList();
        foreach (var duration in durations!)
        {
            await SubscriptionCategoryService.DeleteByDuration(duration);
        }

        await RefreshPlanCategories();
    }

    protected async Task RefreshPlanCategories()
    {
        var subscriptionCategories = await SubscriptionCategoryService.GetAllBaseCategory();
        if (subscriptionCategories == null)
        {
            planComponents = null;
        }
        else
        {
            planComponents = subscriptionCategories!.Select(x => new SubscriptionCategoryComponent
            {
                SubscriptionCategory = x,
                Selected = false
            }
            ).ToList();
        }
    }

    protected class SubscriptionCategoryComponent
    {
        public SubscriptionCategory? SubscriptionCategory { get; set; }
        public bool Selected { get; set; }
    }
}