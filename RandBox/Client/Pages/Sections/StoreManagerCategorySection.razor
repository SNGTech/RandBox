@inject ICategoryService CategoryService
@inject ISubscriptionCategoryService SubscriptionCategoryService
@inject IJSRuntime JSRuntime
@inject IProductService ProductService

@if (categoryComponents == null)
{
    <h4>> Loading Categories</h4>
}
else 
{
    <div class="info-bar col d-flex justify-content-start align-items-center">
        <h3 class="page-info m-0">All Categories</h3>
        <div class="edit-options col d-flex">
            <h4 class="option-btn add-btn m-0" @onclick="OpenAddModal">
                <i class="bi bi-plus-circle" />&nbsp; Add Category
            </h4>
            <h4 class="option-btn edit-btn m-0 @(IsEditButtonActive() ? "" : "inactive")" @onclick="OpenEditModal">
                <i class="bi bi-pencil" />&nbsp; Edit Category
            </h4>
            <h4 class="option-btn delete-btn m-0 @(IsDeleteButtonActive() ? "" : "inactive")" @onclick="OpenDeleteModal">
                <i class="bi bi-dash-circle" />&nbsp; Remove Category
            </h4>
        </div>
    </div>

    <CreateEditCategoryModal @ref="Modal" OnSuccessfulSubmit="RefreshCategories" />
    <DeleteModal @ref="DeleteModal" OnSuccessfulConfirm="DeleteSelectedCategories" />

    <div class="item-carousel">
        <ul class="list-unstyled col d-flex align-items-center flex-wrap">
            @foreach (var categoryComponent in categoryComponents!)
            {
                var category = categoryComponent.Category;
                <li class="@(categoryComponent.Selected ? "selected" : "")" @onclick="@(() => SelectCategory(categoryComponent))">
                    <div class="randbox-badge" style="background-color: @category!.BadgeColour">
                        @category!.Name
                    </div>
                </li>
            }
        </ul>
    </div>
}

@code {
    private List<CategoryComponent>? categoryComponents { get; set; }

    private CreateEditCategoryModal? Modal;
    private DeleteModal? DeleteModal;

    protected override async Task OnInitializedAsync()
    {
        CategoryService._httpInterceptorService.RegisterEvent();
        SubscriptionCategoryService._httpInterceptorService.RegisterEvent();

        await RefreshCategories();
    }

    protected void SelectCategory(CategoryComponent component)
    {
        component.Selected = !component.Selected;
    }

    protected bool IsEditButtonActive()
    {
        return categoryComponents!.Count(x => x.Selected) == 1;
    }

    protected bool IsDeleteButtonActive()
    {
        return categoryComponents!.Count(x => x.Selected) >= 1;
    }

    protected void OpenAddModal()
    {
        Modal!.OpenInAddMode();
    }

    protected void OpenEditModal()
    {
        if (!IsEditButtonActive())
        {
            return;
        }
        var category = categoryComponents!.FirstOrDefault(x => x.Selected)!.Category;
        Modal!.OpenInEditMode(category!);
    }

    protected void OpenDeleteModal()
    {
        if (!IsDeleteButtonActive())
        {
            return;
        }
        DeleteModal!.Open();
    }

    protected async Task DeleteSelectedCategories()
    {
        var categories = categoryComponents!.FindAll(x => x.Selected).Select(x => x.Category).ToList();

        foreach (var category in categories)
        {
            try
            {
                bool isReferenced = await CategoryService.IsCategoryReferenced(category!.CategoryID);

                if (isReferenced)
                {
                    // Handle the case where the category is referenced
                    await JSRuntime.InvokeVoidAsync("alert", $"{category?.Name} is in a product or subscription category and cannot be deleted");
                }
                else
                {
                    await SubscriptionCategoryService.DeleteByCategoryId(category!.CategoryID);
                    await CategoryService.DeleteById(category!.CategoryID);
            }
        }
        catch (Exception ex)
        {
            // Handle other exceptions if needed
            await JSRuntime.InvokeVoidAsync("alert", $"Error checking {category?.Name}: {ex.Message}");
        }
        }

        await RefreshCategories();
    }

    protected async Task RefreshCategories()
    {
        var categories = await CategoryService.GetAll();
        if (categories == null)
        {
            categoryComponents = null;
        }
        else
        {
            categoryComponents = categories!.Select(x => new CategoryComponent
            {
                Category = x,
                Selected = false
            }
            ).ToList();
        }
    }

    protected class CategoryComponent
    {
        public Category? Category { get; set; }
        public bool Selected { get; set; }
    }
}